---
AWSTemplateFormatVersion: '2010-09-09'
Description: Apache web application 
Parameters:
  VpcId:
    Type: String
    Default: vpc-b59d34cf
  SubnetId:
    Type: String
    Default: subnet-af55cd81
    AllowedValues:
    - subnet-af55cd81
    - subnet-fd7ce2a1
    - subnet-fdaff8f2
  InstanceName:
    Type: String
    Default: web-server

  SshCidrAllow:
    Type: String
    Default: 0.0.0.0/0
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Mappings:
  AMI2RegionMap:
    us-east-1:
      '64': ami-035be7bafff33b6b6
    eu-central-1:
      '64': ami-b03ffedf

Resources:
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: InstanceIAMRole
  InstanceIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: s3
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:*
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - "*"
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource:
            - arn:aws:logs:*:*:*

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      KeyName:
        Ref: KeyName
      ImageId:
        Fn::FindInMap:
        - AMI2RegionMap
        - Ref: AWS::Region
        - '64'
      SecurityGroups:
      - Ref: "InstanceSecurityGroup"
      InstanceType:
        Ref: InstanceType
      UserData:
        Fn::Base64:
          !Sub | 
            #!/bin/bash -x
            apt-get update
            apt-get install --yes awscli

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: 
        Ref: "WebServerGroup"
      Cooldown: 60
      ScalingAdjustment: 1

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: 
        Ref: "WebServerGroup"
      Cooldown: 60
      ScalingAdjustment: -1

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        !Ref VpcId
      GroupDescription: Enable HTTP and HTTPS
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SshCidrAllow

  WebServerGroup: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AvailabilityZones: 
        Fn::GetAZs: ""
      LaunchConfigurationName: 
        Ref: "LaunchConfiguration"
      MinSize: "2"
      MaxSize: "2"
      LoadBalancerNames: 
        - Ref: "ElasticLoadBalancer"
      MetricsCollection: 
        - 
          Granularity: "1Minute"
          Metrics: 
            - "GroupMinSize"
            - "GroupMaxSize"

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones:
        Fn::GetAZs: ''
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'


Outputs:
  InstanceSecurityGroup:
    Description: Security group ec2
    Value:
      Fn::GetAtt:
      - InstanceSecurityGroup
      - GroupId